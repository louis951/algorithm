#include <iostream>
#include <list>
#include <stack>
#include <vector>
using namespace std;

class Graph
{
	int V;    // No. of vertices
	list<int> *adj;    // An array of adjacency lists

	// Fills Stack with vertices (in increasing order of finishing
	// times). The top element of stack has the maximum finishing 
	// time
	void fillOrder(int v, bool visited[], stack<int> &Stack);

	// A recursive function to print DFS starting from v
	void DFSUtil(int v, bool visited[], vector<int>&);
public:
	Graph(int V);
	void addEdge(int v, int w);
	void insertion_sort(vector<int>&);
	// The main function that finds and prints strongly connected
	// components
	void printSCCs();

	// Function that returns reverse (or transpose) of this graph
	Graph getTranspose();
};

Graph::Graph(int V)
{
	this->V = V;
	adj = new list<int>[V];
}

// A recursive function to print DFS starting from v
void Graph::DFSUtil(int v, bool visited[],vector<int>&CCS)
{
	// Mark the current node as visited and print it
	visited[v] = true;
	CCS.push_back(v);

	// Recur for all the vertices adjacent to this vertex
	list<int>::iterator i;
	for (i = adj[v].begin(); i != adj[v].end(); ++i)
		if (!visited[*i])
			DFSUtil(*i, visited,CCS);
}

Graph Graph::getTranspose()
{
	Graph g(V);
	for (int v = 0; v < V; v++)
	{
		// Recur for all the vertices adjacent to this vertex
		list<int>::iterator i;
		for (i = adj[v].begin(); i != adj[v].end(); ++i)
		{
			g.adj[*i].push_back(v);
		}
	}
	return g;
}

void Graph::addEdge(int v, int w)
{
	adj[v].push_back(w); // Add w to vâ€™s list.
}

void Graph::fillOrder(int v, bool visited[], stack<int> &Stack)
{
	// Mark the current node as visited and print it
	visited[v] = true;

	// Recur for all the vertices adjacent to this vertex
	list<int>::iterator i;
	for (i = adj[v].begin(); i != adj[v].end(); ++i)
		if (!visited[*i])
			fillOrder(*i, visited, Stack);

	// All vertices reachable from v are processed by now, push v 
	Stack.push(v);
}

void Graph::insertion_sort(vector<int>& A) {
	for (int i = 1; i < A.size(); i++) {
		int buffer = A[i];
		int j;
		for (j = i - 1; j >= 0 && A[j] > buffer; j--)
			A[j + 1] = A[j];
		A[j + 1] = buffer;
	}
}
// The main function that finds and prints all strongly connected 
// components
void Graph::printSCCs()
{
	stack<int> Stack;

	int *predecessor = new int[V];

	// Mark all the vertices as not visited (For first DFS)
	bool *visited = new bool[V];
	bool *visitedCCS = new bool[V];
	for (int i = 0; i < V; i++) {
		predecessor[i] = i;
		visited[i] = false;
		visitedCCS[i] = false;
	}
	visited[0] = true;
	visitedCCS[0] = true;
	// Fill vertices in stack according to their finishing times
	for (int i = 0; i < V; i++)
		if (visited[i] == false)
			fillOrder(i, visited, Stack);

	// Create a reversed graph
	Graph gr = getTranspose();

	// Mark all the vertices as not visited (For second DFS)
	for (int i = 0; i < V; i++)
		visited[i] = false;

	// Now process all vertices in order defined by Stack
	while (Stack.empty() == false)
	{
		// Pop a vertex from stack
		int v = Stack.top();
		Stack.pop();
		vector<int> CCS;
		// Print Strongly connected component of the popped vertex
		if (visited[v] == false)
		{
			gr.DFSUtil(v, visited, CCS);
			
		}
		insertion_sort(CCS);
		CCS.push_back(0);
		for (int i = 0, j = 1; i < CCS.size() - 1; i++, j++) {
			predecessor[CCS[i]] = CCS[j];
			//cout << CCS[i] << " " << CCS[j] << " ";
		}
	}
	for (int i = 0; i < V; i++) {
		int j;
		for (j = i; j != 0; j = predecessor[j]) {
			if (visitedCCS[j] == false) {
				cout << j << " ";
				visitedCCS[j] = true;
			}
		}
		cout << endl;
	}
}

// Driver program to test above functions
int main()
{
	// Create a graph given in the above diagram
	int V, E, s;
	cin >> V >> E >> s;
	Graph g(++V);
	for (int i = 0; i < E; i++) {
		int u, v;
		cin >> u >> v;
		g.addEdge(u, v);
	}
	g.printSCCs();

	return 0;
}
