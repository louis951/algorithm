#include <iostream>
#include <vector>
using namespace std;
int Parent(int i) {
	return (i - 1) / 2;
} 

int Left(int i) {
	return i * 2 + 1;
}

int Right(int i) {
	return i * 2 + 2;
} 

void Max_Heapify(std::vector<int>& Heap, int i, int Heap_Size) {
	int left = Left(i);
	int right = Right(i);
	int largest = i;
	if (left < Heap_Size && Heap[left] > Heap[i])
		largest = left;
	if (right < Heap_Size && Heap[right] > Heap[largest])
		largest = right;
	if (largest != i) {
		swap(Heap[largest], Heap[i]);
		Max_Heapify(Heap, largest, Heap_Size);
	}
}

void Build_Max_Heap(std::vector<int>& Heap) {
	int n = Heap.size() - 1;
	for (int i = Parent(n); i >= 0; i--) {
		Max_Heapify(Heap, i, Heap.size());
	}
}

int Heap_Extract_Max(vector<int>& Heap) {
	int max = Heap[0];
	swap(Heap[0], Heap[Heap.size() - 1]);
	Heap.pop_back();
	Max_Heapify(Heap, 0, Heap.size());
	return max;
}
void print(vector<int>& Heap) {
	for (int i = 0; i < Heap.size(); i++) {
		cout << Heap[i] << " ";
	}
	cout << endl;
}
int main(int argc, char *argv[]){
	vector<int> A;
	int i, n;
	for (cin >> i; i > 0; i--) { 
		cin >> n; 
		A.push_back(n); 
	}
	cout << Heap_Extract_Max(A) << endl;
	print(A);
}
